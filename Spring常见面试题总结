spring基础
什么是spring框架？
spring是一款开源的轻量级java框架 旨在提高开发人员的开发效率和系统的可维护性

我们一般说spring框架都是指spring framework 它是很多模块的集合 使用这些模块可以方便开发 

比如spring支持 IOC 控制反转 和 AOP 面向切面编程 可以方便的堆数据库进行访问 可以很方便地集成第三方组件 （电子邮件 任务 调度 缓存等）

对单元测试支持比较好 支持restful java应用程序地并发

spring的核心思想就是不重新造轮子 开箱即用 提高开发效率

spring提供地核心功能主要是aop和ioc 控制反转和面向切面编程

spring包含模块 

spring 5.x版本

     data Access/integration             web
     JDBC  ORM                       websocket webmvc
     OXM   JMS                       web        webflux
     Transactions 

   aop     aspects                    instruction   messaging

                           core cointainer
            beans     core            context      expression

                            test
Spring5.x 版本中 Web 模块的 Portlet 组件已经被废弃掉，同时增加了用于异步响应式处理的 WebFlux 组件。

core cointainer

spring 模块的核心框架 也可以说是基础模块 主要提供IOC依赖注入功能的支持 spring其他所有的功能基本都是要依赖于此模块 

spring core spring框架的基本核心工具类
spring beans 提供bean的创建 配置和管理等功能的支持
spring context 提供对国际化 事件传播 资源加载等功能的支持
spring expression 提供对表达式语言spring expression language spel的支持 只依赖于core模块 不依赖于其他模块 可以单独使用


AOP
spring aspect 该模块为aspectJ的集成提供支持
spring aop提供了面向切面的编程实现
spring instrument 提供了为jvm添加代理的功能  它为 Tomcat 提供了一个织入代理，能够为 Tomcat 传递类文 件，就像这些文件是被类加载器加载的一样。没有理解也没关系，这个模块的使用场景非常有限。

Data access/integration 

spring-jdbc 提供了对数据库访问的抽象JDBC 不同的数据库都有自己独立的api用于操作数据库 而java程序只需要和JDBC API交互 这样就屏蔽了数据库的影响 
spring-tx 提供对事务的支持
spring-orm 提供对hibernate jpa ibatis等orm框架的支持
spring-jms 消息服务 自spring Framework4.1以后 它还提供了对spring messaging模块的继承 

spring web
spring web 对web功能的实现提供一些最基础的支持
spring webmvc 提供对spring mvc的实现 
spring websocket 提供了对websocket的支持 websocket可以让客户端和服务端进行双向通信
spring webflux 提供对webflux的支持 webflux是spring framework 5.0中 引入新的响应式框架 与spring mvc不同 它不需要servlet api 是完全异步 

messaging
spring message是从spring4.0开始新加入的模块 主要职责是为spring框架集成一些基础的报文传送应用 

spring test
spring团队提供测试驱动开发 有了控制反转ioc的帮助 单元测试和集成测试变得更简单

spring的测试模块对Junit（单元测试框架） TESTNG（类似于junit） mockito（主要用来mock对象） powerMock（解决mockito的问题比如无法模拟final static private方法）等等常用的测试框架支持都比较好

spring springmvc spring boot之间有什么关系
很多人对spring spring mvc spring boot这三者傻傻分不清楚 这里简单介绍一下这三者 
spring包含了很多抹开 其中最重要的是spring core （主要提供ioc依赖注入功能的支持）模块 spring中的其他模块 比如spring mvc的功能实现基本都需要依赖于该模块

spring mvc 是spring中一个重要的模块 主要赋予 spring快速构建mvc架构的web程序的能力 mvc是model view controller的简写 其核心思想是通过将业务逻辑 数据 显示分离来组织代码

使用spring进行开发配置过于麻烦比如 开启某些spring特性时候 需要使用xml或java进行显式配置 于是spring boot诞生了
spring旨在简化j2EE企业应用程序开发 spring boot旨在简化spring 开发（减少配置文件 开箱即用）
spring boot只是简化了配置 如果你需要构建mvc架构的web程序 你还是需要使用spring mvc作为mvc框架 只是说spring boot帮你简化了spring mvc的很多配置 真正做到开箱即用 


spring IOC
谈谈自己对spring ioc的了解 

IOC控制反转 是一种设计思想 不是一个具体的技术实现 IOC思想就是将原本在程序中手动创建对象的控制权 交由spring框架来管理 不过ioc并非spring特有 其他语言也有 

为什么叫控制反转 
控制：指的是对象创建 实例化 管理 的权力 
反转：指的是控制权交给外部环境（spring框架 ioc容器

将对象之间的相互依赖关系交给ioc容器来管理 并由ioc容器来完成对象的注入 这样可以很大程度上简化应用的开发 
在 Spring 中， IoC 容器是 Spring 用来实现 IoC 的载体， IoC 容器实际上就是个 Map（key，value），Map 中存放的是各种对象。

Spring 时代我们一般通过 XML 文件来配置 Bean，后来开发人员觉得 XML 文件来配置不太好，于是 SpringBoot 注解配置就慢慢开始流行起来。


什么是spring bean
简单来说 bean代指的就是那些被ioc容器所管理的对象
我们需要告诉 IoC 容器帮助我们管理哪些对象，这个是通过配置元数据来定义的。配置元数据可以是 XML 文件、注解或者 Java 配置类。
<!-- Constructor-arg with 'value' attribute -->
<bean id="..." class="...">
   <constructor-arg value="..."/>
</bean>

org.springframework.beans和 org.springframework.context 这两个包是 IoC 实现的基础，

将一个类声明为bean的注解有哪些？
@component 通用的注解 可标注任意类为spring组件 如果一个bean不知道属于哪个层 可以使用@compoment注解标注
@repository 对应持久层即Dao层 主要用于数据库相关操作
@service 对应服务层 主要实际一些复杂的逻辑需要用到Dao层
@controller 对应spring mvc控制层 主要用于接受用户请求并调用service层返回数据给前端页面 

  @component和@bean的区别 
@component注解作用于类 @bean注解作用于方法
@component通常是通过类路径扫描来自动侦测以及自动装配到spring容器中  @bean注解通常是我们在标有该注解的方法中定义产生这个bean @bean告诉了spring这是某个类的实例 当我需要用他们的时候还给我
@Bean 注解比 @Component 注解的自定义性更强，而且很多地方我们只能通过 @Bean 注解来注册 bean。比如当我们引用第三方库中的类需要装配到 Spring容器时，则只能通过 @Bean来实现。

注入bean的注解有哪些 ？
Spring 内置的 @Autowired 以及 JDK 内置的 @Resource 和 @Inject 都可以用于注入 Bean。
Annotation	Package	Source
@Autowired	org.springframework.bean.factory	Spring 2.5+
@Resource	javax.annotation	Java JSR-250
@Inject	javax.inject	Java JSR-330
@Autowired 和@Resource使用的比较多一些。

@autowired和@resource的区别是什么？
Autowired属于spring内置的注解 默认注入方式是bytype （根据类型进行配置），也就是说会优先根据接口类型去配置并注入bean （接口的实现类）
这会有什么问题？ 当一个接口存在多个实现类的话，byType这种方式就无法正确注入对象了，因为这个时候 Spring 会同时找到多个满足条件的选择，默认情况下它自己不知道选择哪一个。

这种情况下，注入方式会变为 byName（根据名称进行匹配），这个名称通常就是类名（首字母小写）。
我们还是建议通过 @Qualifier 注解来显式指定名称而不是依赖变量的名称。

@Resource属于 JDK 提供的注解，默认注入方式为 byName。如果无法通过名称匹配到对应的 Bean 的话，注入方式会变为byType。

@Resource 有两个比较重要且日常开发常用的属性：name（名称）、type（类型）。
如果仅指定 name 属性则注入方式为byName，如果仅指定type属性则注入方式为byType，如果同时指定name 和type属性（不建议这么做）则注入方式为byType+byName。


简单总结一下
@Autowired 是 Spring 提供的注解，@Resource 是 JDK 提供的注解。
Autowired 默认的注入方式为byType（根据类型进行匹配），@Resource默认注入方式为 byName（根据名称进行匹配）。
当一个接口存在多个实现类的情况下，@Autowired 和@Resource都需要通过名称才能正确匹配到对应的 Bean。Autowired 可以通过 @Qualifier 注解来显式指定名称，@Resource可以通过 name 属性来显式指定名称。
@Autowired 支持在构造函数、方法、字段和参数上使用。@Resource 主要用于字段和方法上的注入，不支持在构造函数或参数上使用。


注入bean的方式是什么？
依赖注入 (Dependency Injection, DI) 的常见方式：

构造函数注入：通过类的构造函数来注入依赖项。
Setter 注入：通过类的 Setter 方法来注入依赖项。
Field（字段） 注入：直接在类的字段上使用注解（如 @Autowired 或 @Resource）来注入依赖项。

构造函数注入还是setter注入？
Spring 官方推荐构造函数注入，这种注入方式的优势如下：

依赖完整性：确保所有必需依赖在对象创建时就被注入，避免了空指针异常的风险。
不可变性：有助于创建不可变对象，提高了线程安全性。
初始化保证：组件在使用前已完全初始化，减少了潜在的错误。
测试便利性：在单元测试中，可以直接通过构造函数传入模拟的依赖项，而不必依赖 Spring 容器进行注入。
构造函数注入适合处理必需的依赖项，而 Setter 注入 则更适合可选的依赖项，这些依赖项可以有默认值或在对象生命周期中动态设置。虽然 @Autowired 可以用于 Setter 方法来处理必需的依赖项，但构造函数注入仍然是更好的选择。

在某些情况下（例如第三方类不提供 Setter 方法），构造函数注入可能是唯一的选择。

bean的作用域有哪些？

1.singleton ioc容器中只有唯一的bean实例 spring中的bean默认都是单例的 是对单例设计模式的应用  
2.prototype：每次获取都会创建一个新的bean实例 也就是说，连续getbean（）两次得到的是不同的bean实例 proto的意思是原始的最初的
3.request 仅仅web可用 每次http请求都会产生一个新的bean 该bean仅在当前http session内有效
4.session 仅web可用 每一次来自新的http请求都会产生一个新的bean（会话bean）该bean当且仅当http session内有效
5.application/global——session 仅web应用可用 每个web应用在启动时候创建一个bean 该bean仅在当前应用启用时间内有效
6.websocket 仅在web应用可用 每一次websocket会话产生一个新的bean

如何配置bean的作用域呢？
xml方式
<bean id="..." class="..." scope="singleton"></bean>

注解方式
@Bean
@Scope(value = ConfigurableBeanFactory.SCOPE_PROTOTYPE)
public Person personPrototype() {
    return new Person();
}


bean是线程安全的吗？
Spring 框架中的 Bean 是否线程安全，取决于其作用域和状态。

我们这里以最常用的两种作用域 prototype 和 singleton 为例介绍。几乎所有场景的 Bean 作用域都是使用默认的 singleton ，重点关注 singleton 作用域即可。
prototype 作用域下，每次获取都会创建一个新的 bean 实例，不存在资源竞争问题，所以不存在线程安全问题。singleton 作用域下，
IoC 容器中只有唯一的 bean 实例，可能会存在资源竞争问题（取决于 Bean 是否有状态）。如果这个 bean 是有状态的话，那就存在线程安全问题（有状态 Bean 是指包含可变的成员变量的对象）

不过，大部分 Bean 实际都是无状态（没有定义可变的成员变量）的（比如 Dao、Service），这种情况下， Bean 是线程安全的。


对于有状态单例 Bean 的线程安全问题，常见的三种解决办法是：

避免可变成员变量: 尽量设计 Bean 为无状态。
使用ThreadLocal: 将可变成员变量保存在 ThreadLocal 中，确保线程独立。
使用同步机制: 利用 synchronized 或 ReentrantLock 来进行同步控制，确保线程安全。


bean的生命周期了解么？
1.创建bean的实例：bean容器首先会找到配置文件中的bean定义 然后使用java反射api来创建bean的实例。
2.bean的属性赋值/填充 为 Bean 设置相关属性和依赖，例如@Autowired 等注解注入的对象、@Value 注入的值、setter方法或构造函数注入依赖和值、@Resource注入的各种资源。
3.bean初始化：
如果 Bean 实现了 BeanNameAware 接口，调用 setBeanName()方法，传入 Bean 的名字。
如果 Bean 实现了 BeanClassLoaderAware 接口，调用 setBeanClassLoader()方法，传入 ClassLoader对象的实例。
如果 Bean 实现了 BeanFactoryAware 接口，调用 setBeanFactory()方法，传入 BeanFactory对象的实例。
与上面的类似，如果实现了其他 *.Aware接口，就调用相应的方法。
如果有和加载这个 Bean 的 Spring 容器相关的 BeanPostProcessor 对象，执行postProcessBeforeInitialization() 方法
如果 Bean 实现了InitializingBean接口，执行afterPropertiesSet()方法。
如果 Bean 在配置文件中的定义包含 init-method 属性，执行指定的方法。
如果有和加载这个 Bean 的 Spring 容器相关的 BeanPostProcessor 对象，执行postProcessAfterInitialization() 方法。
4.销毁bean
销毁并不是说要立马把 Bean 给销毁掉，而是把 Bean 的销毁方法先记录下来，将来需要销毁 Bean 或者销毁容器的时候，就调用这些方法去释放 Bean 所持有的资源。
如果 Bean 实现了 DisposableBean 接口，执行 destroy() 方法。
如果 Bean 在配置文件中的定义包含 destroy-method 属性，执行指定的 Bean 销毁方法。或者，也可以直接通过@PreDestroy 注解标记 Bean 销毁之前执行的方法。

Aware 接口能让 Bean 能拿到 Spring 容器资源。
Spring 中提供的 Aware 接口主要有：

BeanNameAware：注入当前 bean 对应 beanName；
BeanClassLoaderAware：注入加载当前 bean 的 ClassLoader；
BeanFactoryAware：注入当前 BeanFactory 容器的引用。
BeanPostProcessor 接口是 Spring 为修改 Bean 提供的强大扩展点。

BeanPostProcessor 接口是 Spring 为修改 Bean 提供的强大扩展点。

public interface BeanPostProcessor {

	// 初始化前置处理
	default Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {
		return bean;
	}

	// 初始化后置处理
	default Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {
		return bean;
	}

}
postProcessBeforeInitialization：Bean 实例化、属性注入完成后，InitializingBean#afterPropertiesSet方法以及自定义的 init-method 方法之前执行；
postProcessAfterInitialization：类似于上面，不过是在 InitializingBean#afterPropertiesSet方法以及自定义的 init-method 方法之后执行。
InitializingBean 和 init-method 是 Spring 为 Bean 初始化提供的扩展点。

public interface InitializingBean {
 // 初始化逻辑
	void afterPropertiesSet() throws Exception;
}
指定 init-method 方法，指定初始化方法：

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id="demo" class="com.chaycao.Demo" init-method="init()"/>

</beans>
如何记忆呢？

整体上可以简单分为四步：实例化 —> 属性赋值 —> 初始化 —> 销毁。
初始化这一步涉及到的步骤比较多，包含 Aware 接口的依赖注入、BeanPostProcessor 在初始化前后的处理以及 InitializingBean 和 init-method 的初始化操作。
销毁这一步会注册相关销毁回调接口，最后通过DisposableBean 和 destory-method 进行销毁。




spring Aop
谈谈自己对于aop的管理 
aop是面向切面编程 能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理 日志管理 权限控制等）封装起来  便于减少系统的重复代码 降低模块间的耦合度 并有利于未来的可拓展性和可维护性
spring AOP就是基于动态代理的 如果要代理的对象 实现了某个接口 那么spring AOp会使用jdk proxy（proxy的意思就是代理 ），去创建代理对象，而对于没有实现接口的对象 就无法使用jdk proxy去进行代理 
这时候spring AOP会使用cglib生成一个被代理对象的子类来作为代理。
当然你也可以使用 AspectJ！ spring AOP已经集成了AspectJ;AspectJ应该算是java生态中最完整的AOP框架了 
AOP切面编程涉及到一些专业术语 
术语	含义
目标(Target)	被通知的对象
代理(Proxy)	向目标对象应用通知之后创建的代理对象
连接点(JoinPoint)	目标对象的所属类中，定义的所有方法均为连接点
切入点(Pointcut)	被切面拦截 / 增强的连接点（切入点一定是连接点，连接点不一定是切入点）
通知(Advice)	增强的逻辑 / 代码，也即拦截到目标对象的连接点之后要做的事情
切面(Aspect)	切入点(Pointcut)+通知(Advice)
Weaving(织入)	将通知应用到目标对象，进而生成代理对象的过程动作

SpringAOP和AspectJ AOP有什么区别
特性                springAOP                                  AspectJ
增强方式         运行时增强（基于动态代理）               编译时增强 类加载时增强（直接操作字节码）
切入点支持       方法级spring bean范围内 不支持final和static方法     方法级 字段 构造器 静态方法
性能   运行时候依赖代理 有一定开销 切面多时性能较低                       运行时无代理开销性能更高
复杂性         简单易用适用于大多数场景                                  功能强大 但相对复杂
使用场景   spring应用下比较简单的AOP需求                                 高性能 高复杂度的AOP需求

如何选择？
功能考量：AspectJ支持更复杂的AOP场景 spring AOP更简单易用 如果你需要增强final方法 静态方法 字段访问 构造器调用 等 或者需要在非spring管理的对象上应用增强逻辑 AspectJ是唯一的选择
性能考量：切面数量较少时候 两者性能差异不大 下单切面较多时候AspectJ性能更优

一句话总结 简单场景优先使用spring AOP 复杂场景或者高性能需求时 选择AspectJ

AOP常用的通知类型有哪些？
                              call

before -----------------------

                              method

after--------------------------

arount
                   return                         throw
after returing  
                                                after throwing
                                result


Before （前置通知 ）：目标对象的方法调用之前触发 
After（后置通知） ：目标对新鲜的方法调用之后触发
AfterReturning（返回通知）：目标对象的方法调用完成，在返回结果值之后触发
AfterThrowing（异常通知）目标对象的方法运行中抛出/触发异常后触发、afterReturning和afterThrow两者互斥 如果方法调用成功无异常 则会有返回值 如果方法抛出了异常 则不会有返回值
Around（环绕通知）编程式控制目标对象的方法调用 环绕通知是所有通知类型中可操作范围最大的一种，因为它可以直接拿到目标对象，以及要执行的方法 所以围绕通知可以任意在目标对象的方法调用前后搞事 甚至不调用目标对象的方法

多个切面的执行顺序如何控制?
1.通常使用@order注解直接定义切面顺序
// 值越小优先级越高
@Order(3)
@Component
@Aspect
public class LoggingAspect implements Ordered {

2.实现ordered接口重写getorder方法
@Component
@Aspect
public class LoggingAspect implements Ordered {

    // ....

    @Override
    public int getOrder() {
        // 返回值越小优先级越高
        return 1;
    }
}

spring mvc
说说自己对于spring MVC了解？
MVC是模型model 视图view 控制器controller的简写 其核心思想是通过将业务逻辑 数据 显示分离来组织代码
       model

view       controller
网上很多人说MVC不是设计模式 只是软件设计规范 我个人更倾向于MVC同样是众多设计模式的一种
想要真正理解spring MVC 我们需要看看model1和model2这两个没有spring mvc的时代
model时代 
在 Model1 模式下，整个 Web 应用几乎全部用 JSP 页面组成，只用少量的 JavaBean 来处理数据库连接、访问等操作。 jsp是javaserver pages 是java技术中的一种动态网页技术 用于生成基于html xml或者其他格式的网页内容 它允许在网页中嵌入java代码 是的网页能够动态生成
内容并于服务器端的数据交互
这个模式jsp既是控制层又是表现层 这种模式存在很多问题 比如控制逻辑和表现逻辑混杂在一起 导致代码复用率极低 再比如前端和后端相互依赖 难以进行测试维护并且开发效率极低




client                send request                jsp（controller& view）
                       send response                           


                                                     java bean（model & controller）                                 《----------------database

model2时代
java bean（model） + jsp（view）+ sevlet（controller）这种开发模式就是早期的javaweb MVC开发模式
model 涉及的数据 也就是 dao和bean
view  展示模型中的数据 只是用来展示
controller 接受用户请求 并将请求发送到Model 最后返回数据给JSP并展示给用户
Model2 模式下还存在很多问题，Model2 的抽象和封装程度还远远不够，使用 Model2 进行开发时不可避免地会重复造轮子，这就大大降低了程序的可维护性和复用性。


spring MVC时代
随着Spring轻量级开发框架的流行 spring MVC生态区出现了spring MVC框架 Spring MVC是目前最优秀的MVC框架 
相比于 Struts2 ， Spring MVC 使用更加简单和方便，开发效率更高，并且 Spring MVC 运行速度更快。

于是，很多 JavaWeb 开发相关的 MVC 框架应运而生比如 Struts2，但是 Struts2 比较笨重。
MVC 是一种设计模式，Spring MVC 是一款很优秀的 MVC 框架。Spring MVC 可以帮助我们进行更简洁的 Web 层的开发，
并且它天生与 Spring 框架集成。Spring MVC 下我们一般把后端项目分为 Service 层（处理业务）、Dao 层（数据库操作）、Entity 层（实体类）、Controller 层(控制层，返回数据给前台页面)。

spring MVC的核心组件有哪些？
DispatcherServlet ：核心的中央处理器：负责接受请求 分发并给与客户端相应
HandlerMapping 处理器映射器 根据url去匹配查找能处理的handler 并会将请求涉及到的拦截器和handler一起封装
HandlerAdapter：处理器适配器 根据handlermapping 找到的Handler 适配执行对应的handler
handler 请求处理器
ViewREsolver视图解析器 根据handler返回的逻辑视图 解析并渲染真正的视图 并传递给DIspatcherServlet


Spring MVC工作原理了解吗？
流程：
客户端发送请求 DispatcherServlet拦截请求 
2.dispatcherservlet根据请求调用handlermapping HandlerMapping根据url去匹配查找能处理的handler（也就是我们平常说的controller控制器）并且将请求涉及到的handler一起封装
3.dispatherSevlet调用handlerAdapter 适配器执行handler
4.handler完成对用户请求的处理后 会返回一个modelAndView对象给dispatcherServlet，modelAndView顾名思义，包含了数据模型以及相应的视图的信息，model是返回的数据对象，view是个逻辑上的view、
5.viewResolver会根据逻辑view查找实际的view
6.dispatcherServelt把返回的model传给view（视图渲染）
7.把view返回给请求者。

这是传统的开发模式 
现在主流的是前后端分离 这种情况下view概念发生了一些变化 由于view通常由前端框架（vue，react等）来处理 后端不再负责渲染页面，而是只负责提供数据 因此
前后端分离时，后端通常不再返回具体的视图，而是返回纯数据（通常是 JSON 格式），由前端负责渲染和展示。
View 的部分在前后端分离的场景下往往不需要设置，Spring MVC 的控制器方法只需要返回数据，不再返回 ModelAndView，而是直接返回数据，Spring 会自动将其转换为 JSON 格式。相应的，ViewResolver 也将不再被使用。
怎么做到呢？

使用 @RestController 注解代替传统的 @Controller 注解，这样所有方法默认会返回 JSON 格式的数据，而不是试图解析视图。
如果你使用的是 @Controller，可以结合 @ResponseBody 注解来返回 JSON。


统一异常处理怎么做？
推荐使用注解的方式统一异常处理，具体会使用到 @ControllerAdvice + @ExceptionHandler 这两个注解会使用到@controllerAdvice + @ExceptionHandler这两个注解
这种异常方式处理下会给所以或者指定的controller织入异常处理的逻辑（AOP） 当controller中的方法 抛出异常的时候 由被@exceptionHandler注解修饰的方法进行处理

ExceptionHandlerMathodResolver中 getMappedMehond方法决定了异常具体被哪个被@ExceptionHandler注解修饰的方法处理异常
从源代码看出：getMappedMethod()会首先找到可以匹配处理异常的所有方法信息，然后对其进行从小到大的排序，最后取最小的那一个匹配的方法(即匹配度最高的那个)。

Spring框架中用到了哪些设计模式？
工厂设计模式:Spring使用工厂模式通过BeanFactory 、ApplicationContext创建bean对象
代理设计模式：spring aop功能的实现
单例设计模式：Spring中的bean默认都是单例的 
模块方法模式：Spring中jdbcTemplate hibernateTemplate等以template结尾的对数据库操作的类，它们就使用到了模板模式
包装器设计模式：我们的项目需要连接多个数据库 而且不同的客户在每次访问中根据需要会去访问不同的数据库 这种模式让我们可以根据客户的需求能够动态切换不同的数据源
适配者模式 spring AOP的增强或者通知（advice）使用到了适配者模式 spring mvc中也是用到了适配者模式适配controller


Spring的循环依赖 
循环依赖是指bean对象循环引用 是两个或者多个bean之间相互持有对方的引用 例如CircularDependencyA → CircularDependencyB → CircularDependencyA。

单个对象的自我依赖也会出现循环依赖，但这种概率极低，属于是代码编写错误。
Spring 框架通过使用三级缓存来解决这个问题，确保即使在循环依赖的情况下也能正确创建 Bean。
spring中的三级缓存其实就是三个map如下
// 一级缓存
/** Cache of singleton objects: bean name to bean instance. */
private final Map<String, Object> singletonObjects = new ConcurrentHashMap<>(256);

// 二级缓存
/** Cache of early singleton objects: bean name to bean instance. */
private final Map<String, Object> earlySingletonObjects = new HashMap<>(16);

// 三级缓存
/** Cache of singleton factories: bean name to ObjectFactory. */
private final Map<String, ObjectFactory<?>> singletonFactories = new HashMap<>(16);
一级缓存singletonObjects存放最终形态的bean 单例池
二级缓存earlySingletonObjects存放过度的bean 尚未属性填充 也就是三级缓存中objectFactory中存放的对象 与三级缓存配合使用 可以防止AOP的情况下每次调用objectfactory#getobject（）都会产生新的代理对象的
三级缓存singletonFactories 存放objectfactory objectfactory中的getobject（）方法 可以生成原始bean对象挥着代理对象（如果bean'被AOP切面代理）三级缓存只会对单例bean生效

接下来说一下 Spring 创建 Bean 的流程：

先去 一级缓存 singletonObjects 中获取，存在就返回；
如果不存在或者对象正在创建中，于是去 二级缓存 earlySingletonObjects 中获取；
如果还没有获取到，就去 三级缓存 singletonFactories 中获取，通过执行 ObjectFacotry 的 getObject() 就可以获取该对象，获取成功之后，从三级缓存移除，并将该对象加入到二级缓存中。

Spring 在创建 Bean 的时候，如果允许循环依赖的话，Spring 就会将刚刚实例化完成，但是属性还没有初始化完的 Bean 对象给提前暴露出去，这里通过 addSingletonFactory 方法，向三级缓存中添加一个 ObjectFactory 对象：

那么上边在说 Spring 创建 Bean 的流程时说了，如果一级缓存、二级缓存都取不到对象时，会去三级缓存中通过 ObjectFactory 的 getObject 方法获取对象。

以上面的循环依赖代码为例，整个解决循环依赖的流程如下：

当 Spring 创建 A 之后，发现 A 依赖了 B ，又去创建 B，B 依赖了 A ，又去创建 A；
在 B 创建 A 的时候，那么此时 A 就发生了循环依赖，由于 A 此时还没有初始化完成，因此在 一二级缓存 中肯定没有 A；
那么此时就去三级缓存中调用 getObject() 方法去获取 A 的 前期暴露的对象 ，也就是调用上边加入的 getEarlyBeanReference() 方法，生成一个 A 的 前期暴露对象；
然后就将这个 ObjectFactory 从三级缓存中移除，并且将前期暴露对象放入到二级缓存中，那么 B 就将这个前期暴露对象注入到依赖，来支持循环依赖。

只用两级缓存够吗？ 在没有 AOP 的情况下，确实可以只使用一级和二级缓存来解决循环依赖问题。但是，当涉及到 AOP 时，三级缓存就显得非常重要了，
因为它确保了即使在 Bean 的创建过程中有多次对早期引用的请求，也始终只返回同一个代理对象，从而避免了同一个 Bean 有多个代理对象的问题。

最后总结一下 Spring 如何解决三级缓存：

在三级缓存这一块，主要记一下 Spring 是如何支持循环依赖的即可，也就是如果发生循环依赖的话，就去 三级缓存 singletonFactories 中拿到三级缓存中存储的 ObjectFactory
并调用它的 getObject() 方法来获取这个循环依赖对象的前期暴露对象（虽然还没初始化完成，但是可以拿到该对象在堆中的存储地址了），并且将这个前期暴露对象放到二级缓存中，这样在循环依赖时，就不会重复初始化了！

不过，这种机制也有一些缺点，比如增加了内存开销（需要维护三级缓存，也就是三个 Map），降低了性能（需要进行多次检查和转换）。并且，还有少部分情况是不支持循环依赖的，比如非单例的 bean 和@Async注解的 bean 无法支持循环依赖。

@Lazy 能解决循环依赖吗？
@Lazy 用来标识类是否需要懒加载/延迟加载，可以作用在类上、方法上、构造器上、方法参数上、成员变量中。

Spring Boot 2.2 新增了全局懒加载属性，开启后全局 bean 被设置为懒加载，需要时再去创建。

配置文件配置全局懒加载：

#默认false
spring.main.lazy-initialization=true

编码的方式设置全局懒加载：

SpringApplication springApplication=new SpringApplication(Start.class);
springApplication.setLazyInitialization(false);
springApplication.run(args);

如非必要，尽量不要用全局懒加载。全局懒加载会让 Bean 第一次使用的时候加载会变慢，并且它会延迟应用程序问题的发现（当 Bean 被初始化时，问题才会出现）。

如果一个 Bean 没有被标记为懒加载，那么它会在 Spring IoC 容器启动的过程中被创建和初始化。如果一个 Bean 被标记为懒加载，
那么它不会在 Spring IoC 容器启动时立即实例化，而是在第一次被请求时才创建。这可以帮助减少应用启动时的初始化时间，也可以用来解决循环依赖问题。

循环依赖问题是如何通过@Lazy 解决的呢？这里举一个例子，比如说有两个 Bean，A 和 B，他们之间发生了循环依赖，那么 A 的构造器上添加 @Lazy 注解之后（延迟 Bean B 的实例化），加载的流程如下：
首先 Spring 会去创建 A 的 Bean，创建时需要注入 B 的属性；
由于在 A 上标注了 @Lazy 注解，因此 Spring 会去创建一个 B 的代理对象，将这个代理对象注入到 A 中的 B 属性；
之后开始执行 B 的实例化、初始化，在注入 B 中的 A 属性时，此时 A 已经创建完毕了，就可以将 A 给注入进去。

从上面的加载流程可以看出： @Lazy 解决循环依赖的关键点在于代理对象的使用。

没有 @Lazy 的情况下：在 Spring 容器初始化 A 时会立即尝试创建 B，而在创建 B 的过程中又会尝试创建 A，最终导致循环依赖（即无限递归，最终抛出异常）。
使用 @Lazy 的情况下：Spring 不会立即创建 B，而是会注入一个 B 的代理对象。由于此时 B 仍未被真正初始化，A 的初始化可以顺利完成。等到 A 实例实际调用 B 的方法时，代理对象才会触发 B 的真正初始化。
@Lazy 能够在一定程度上打破循环依赖链，允许 Spring 容器顺利地完成 Bean 的创建和注入。但这并不是一个根本性的解决方案，尤其是在构造函数注入、复杂的多级依赖等场景中，@Lazy 无法有效地解决问题。因此，最佳实践仍然是尽量避免设计上的循环依赖。

SpringBoot 允许循环依赖发生么？
SpringBoot 2.6.x 以前是默认允许循环依赖的，也就是说你的代码出现了循环依赖问题，一般情况下也不会报错。SpringBoot 2.6.x 以后官方不再推荐编写存在循环依赖的代码，建议开发者自己写代码的时候去减少不必要的互相依赖。这其实也是我们最应该去做的，
循环依赖本身就是一种设计缺陷，我们不应该过度依赖 Spring 而忽视了编码的规范和质量，说不定未来某个 SpringBoot 版本就彻底禁止循环依赖的代码了。

SpringBoot 2.6.x 以后，如果你不想重构循环依赖的代码的话，也可以采用下面这些方法：

在全局配置文件中设置允许循环依赖存在：spring.main.allow-circular-references=true。最简单粗暴的方式，不太推荐。
在导致循环依赖的 Bean 上添加 @Lazy 注解，这是一种比较推荐的方式。@Lazy 用来标识类是否需要懒加载/延迟加载，可以作用在类上、方法上、构造器上、方法参数上、成员变量中。



Spring事务
Spring管理事务的方法有几种？
编程式事务 在代码中硬编码(在分布式系统中推荐使用) : 通过 TransactionTemplate或者 TransactionManager 手动管理事务，事务范围过大会出现事务未提交导致超时，因此事务要比锁的粒度更小
声明式事务 在 XML 配置文件中配置或者直接基于注解（单体应用或者简单业务系统推荐使用） : 实际是通过 AOP 实现（基于@Transactional 的全注解方式使用最多）

spring事务中哪几种事务传播行为？
事务传播行为是为了解决业务层方法之间互相调用的事务问题。
当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如：方法可能继续在现有事务中运行，也可能开启一个新事务，并在自己的事务中运行。

正确的事务传播行为可能的值如下:

1.TransactionDefinition.PROPAGATION_REQUIRED

使用的最多的一个事务传播行为，我们平时经常使用的@Transactional注解默认使用就是这个事务传播行为。如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。

2.TransactionDefinition.PROPAGATION_REQUIRES_NEW

创建一个新的事务，如果当前存在事务，则把当前事务挂起。也就是说不管外部方法是否开启事务，Propagation.REQUIRES_NEW修饰的内部方法会新开启自己的事务，且开启的事务相互独立，互不干扰。

3.TransactionDefinition.PROPAGATION_NESTED

如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于TransactionDefinition.PROPAGATION_REQUIRED。

4.TransactionDefinition.PROPAGATION_MANDATORY

如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。（mandatory：强制性）

这个使用的很少。

若是错误的配置以下 3 种事务传播行为，事务将不会发生回滚：

TransactionDefinition.PROPAGATION_SUPPORTS: 如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。
TransactionDefinition.PROPAGATION_NOT_SUPPORTED: 以非事务方式运行，如果当前存在事务，则把当前事务挂起。
TransactionDefinition.PROPAGATION_NEVER: 以非事务方式运行，如果当前存在事务，则抛出异常。

Spring事务中的隔离级别有哪几种？
和事务传播行为这块一样，为了方便使用，Spring 也相应地定义了一个枚举类：Isolation
public enum Isolation {

    DEFAULT(TransactionDefinition.ISOLATION_DEFAULT),
    READ_UNCOMMITTED(TransactionDefinition.ISOLATION_READ_UNCOMMITTED),
    READ_COMMITTED(TransactionDefinition.ISOLATION_READ_COMMITTED),
    REPEATABLE_READ(TransactionDefinition.ISOLATION_REPEATABLE_READ),
    SERIALIZABLE(TransactionDefinition.ISOLATION_SERIALIZABLE);

    private final int value;

    Isolation(int value) {
        this.value = value;
    }

    public int value() {
        return this.value;
    }

}

TransactionDefinition.ISOLATION_DEFAULT :使用后端数据库默认的隔离级别，MySQL 默认采用的 REPEATABLE_READ 隔离级别 Oracle 默认采用的 READ_COMMITTED 隔离级别.
TransactionDefinition.ISOLATION_READ_UNCOMMITTED :最低的隔离级别，使用这个隔离级别很少，因为它允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读
TransactionDefinition.ISOLATION_READ_COMMITTED : 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生
TransactionDefinition.ISOLATION_REPEATABLE_READ : 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。
TransactionDefinition.ISOLATION_SERIALIZABLE : 最高的隔离级别，完全服从 ACID 的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。
但是这将严重影响程序的性能。通常情况下也不会用到该级别。


@Transactional(rollbackFor = Exception.class)注解了解吗？
Exception 分为运行时异常 RuntimeException 和非运行时异常。事务管理对于企业应用来说是至关重要的，即使出现异常情况，它也可以保证数据的一致性。

当 @Transactional 注解作用于类上时，该类的所有 public 方法将都具有该类型的事务属性，同时，我们也可以在方法级别使用该标注来覆盖类级别的定义。

@Transactional 注解默认回滚策略是只有在遇到RuntimeException(运行时异常) 或者 Error 时才会回滚事务，而不会回滚 Checked Exception（受检查异常）。这是因为 Spring 认为RuntimeException和 Error 是不可预期的错误，
而受检异常是可预期的错误，可以通过业务逻辑来处理。


如果想要修改默认的回滚策略，可以使用 @Transactional 注解的 rollbackFor 和 noRollbackFor 属性来指定哪些异常需要回滚，哪些异常不需要回滚。例如，如果想要让所有的异常都回滚事务，可以使用如下的注解：

@Transactional(rollbackFor = Exception.class)
public void someMethod() {
// some business logic
}
如果想要让某些特定的异常不回滚事务，可以使用如下的注解：

@Transactional(noRollbackFor = CustomException.class)
public void someMethod() {
// some business logic
}


Spring Data JPA
JPA重要的是实战

如何使用 JPA 在数据库中非持久化一个字段？
假如我们有下面一个类：

@Entity(name="USER")
public class User {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "ID")
    private Long id;

    @Column(name="USER_NAME")
    private String userName;

    @Column(name="PASSWORD")
    private String password;

    private String secrect;

}

如果我们想让secrect 这个字段不被持久化，也就是不被数据库存储怎么办？我们可以采用下面几种方法：

static String transient1; // not persistent because of static
final String transient2 = "Satish"; // not persistent because of final
transient String transient3; // not persistent because of transient
@Transient
String transient4; // not persistent because of @Transient

一般使用后面两种方式比较多，我个人使用注解的方式比较多。

JPA 的审计功能是做什么的？有什么用？
审计功能主要是帮助我们记录数据库操作的具体行为比如某条记录是谁创建的、什么时间创建的、最后修改人是谁、最后修改时间是什么时候。
@Data
@AllArgsConstructor
@NoArgsConstructor
@MappedSuperclass
@EntityListeners(value = AuditingEntityListener.class)
public abstract class AbstractAuditBase {

    @CreatedDate
    @Column(updatable = false)
    @JsonIgnore
    private Instant createdAt;

    @LastModifiedDate
    @JsonIgnore
    private Instant updatedAt;

    @CreatedBy
    @Column(updatable = false)
    @JsonIgnore
    private String createdBy;

    @LastModifiedBy
    @JsonIgnore
    private String updatedBy;
}

实体之间的关联关系注解有哪些？
@OneToOne : 一对一。
@ManyToMany：多对多。
@OneToMany : 一对多。
@ManyToOne：多对一。
利用 @ManyToOne 和 @OneToMany 也可以表达多对多的关联关系。

Spring Security
有哪些控制请求访问权限的方法？
permitAll()：无条件允许任何形式访问，不管你登录还是没有登录。
anonymous()：允许匿名访问，也就是没有登录才可以访问。
denyAll()：无条件决绝任何形式的访问。
authenticated()：只允许已认证的用户访问。
fullyAuthenticated()：只允许已经登录或者通过 remember-me 登录的用户访问。
hasRole(String) : 只允许指定的角色访问。
hasAnyRole(String) : 指定一个或者多个角色，满足其一的用户即可访问。
hasAuthority(String)：只允许具有指定权限的用户访问
hasAnyAuthority(String)：指定一个或者多个权限，满足其一的用户即可访问。
hasIpAddress(String) : 只允许指定 ip 的用户访问。

如何对密码进行加密？
如果我们需要保存密码这类敏感数据到数据库的话，需要先加密再保存。

Spring Security 提供了多种加密算法的实现，开箱即用，非常方便。这些加密算法实现类的接口是 PasswordEncoder ，如果你想要自己实现一个加密算法的话，也需要实现 PasswordEncoder 接口。

PasswordEncoder 接口一共也就 3 个必须实现的方法。

public interface PasswordEncoder {
    // 加密也就是对原始密码进行编码
    String encode(CharSequence var1);
    // 比对原始密码和数据库中保存的密码
    boolean matches(CharSequence var1, String var2);
    // 判断加密密码是否需要再次进行加密，默认返回 false
    default boolean upgradeEncoding(String encodedPassword) {
        return false;
    }
}

如何优雅更换系统使用的加密算法？
如果我们在开发过程中，突然发现现有的加密算法无法满足我们的需求，需要更换成另外一个加密算法，这个时候应该怎么办呢？

推荐的做法是通过 DelegatingPasswordEncoder 兼容多种不同的密码加密方案，以适应不同的业务需求。

从名字也能看出来，DelegatingPasswordEncoder 其实就是一个代理类，并非是一种全新的加密算法，它做的事情就是代理上面提到的加密算法实现类。在 Spring Security 5.0 之后，默认就是基于 DelegatingPasswordEncoder 进行密码加密的。
