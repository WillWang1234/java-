线程和进程
什么是进程？
进程是程序的一次执行过程 是系统运行程序的基本单位 因此进程是动态的 系统运行一个程序即+
使一个进程从创建 运行到消亡的过程
在java中 当我们启动main函数的时候其实就是启动了一个jvm进程 而main函数所在的线程就是这个进程中的一个线程 也称主线程
在 Windows 中通过查看任务管理器的方式，我们就可以清楚看到 Windows 当前运行的进程（.exe 文件的运行）。



什么是线程？
线程和进程相似 但线程是一个比进程更小的执行单位 一个进程在其执行的过程中可以产生多个线程 与进程不同的是 同类的多个线程共享进程的堆和方法区资源
但每个线程有自己的程序计数器 虚拟机栈和本地方法栈
所以系统在产生一个线程 或是在各个线程之间做切换工作时，负担要比进程小得多  也因为如此 线程也被称为轻量级进程 。
public class MultiThread {
public static void main(String[] args) {
// 获取 Java 线程管理 MXBean
ThreadMXBean threadMXBean = ManagementFactory.getThreadMXBean();
// 不需要获取同步的 monitor 和 synchronizer 信息，仅获取线程和线程堆栈信息
ThreadInfo[] threadInfos = threadMXBean.dumpAllThreads(false, false);
// 遍历线程信息，仅打印线程 ID 和线程名称信息
for (ThreadInfo threadInfo : threadInfos) {
System.out.println("[" + threadInfo.getThreadId() + "] " + threadInfo.getThreadName());
+
+
}
}
}

上述程序输出如下（输出内容可能不同，不用太纠结下面每个线程的作用，只用知道 main 线程执行 main 方法即可）
[5] Attach Listener //添加事件
[4] Signal Dispatcher // 分发处理给 JVM 信号的线程
[3] Finalizer //调用对象 finalize 方法的线程
[2] Reference Handler //清除 reference 线程
[1] main //main 线程,程序入口
从上面的输出内容可以看出：一个 Java 程序的运行是 main 线程和多个其他线程同时运行

java的线程和操作系统的线程有啥区别？
jdk1.2之前是java线程是基于green threads实现的 这是一种用户级线程 也就是说jvm模拟了多线程的运行不依赖于操作系统 但是由于绿色线程和原生线程比
在使用的时候有些限制(绿色线程不能直接使用操作系统提供的功能比如异步IO 只能在一个内核线程上运行 不能使用多核

jdk1.2以后 java线程改为基于原生线程 native threads 实现 也就是jvm直接使用操作系统的原生的内核级线程 来实现java线程 由操作系统来进行线程的调度和管理

用户线程 由用户空间程序管理和调度的线程 运行在用户空间 专门给应用程序使用
内核线程 由操作系统内核管理和调度的线程 运行在内核空间（只有内核程序可以访问
用户线程创建和切换成本低，但不可以利用多核。内核态线程，创建和切换成本高，可以利用多核。

线程模型是用户模型和线程模型之间的关联方式 常见的线程模型有三种
一对一 多对一 多对多
在 Windows 和 Linux 等主流操作系统中，Java 线程采用的是一对一的线程模型，也就是一个 Java 线程对应一个系统内核线程
Solaris 系统是一个特例（Solaris 系统本身就支持多对多的线程模型），HotSpot VM 在 Solaris 上支持多对多和一对一。

线程和进程之间的关系 区别 和优缺点

运行时数据区域 包含线程共享的区域 堆和字符串常量池
               线程私有的区域 线程 虚拟机栈 本地方法栈 程序计数器
本地内存  包含  元空间 运行时常量池 和直接内存

一个进程中可以有很多个线程 多个线程共享堆和方法区（元空间 ）资源 但是每个线程有自己的虚拟机栈 本地方法栈和程序计数器

总结 ：线程是进程划分的更小的运行单位 线程和进程的最大不同是基本上各个进程是独立的 线程则不一定 因为同一进程中的线程极有可能会相互影响 线程执行开销小
但不利于资源的管理和保护 进程相反

为什么 本地方法栈 和虚拟机栈 和程序计数器是线程私有的？

程序计数器的主要作用：
1.字节码解释器通过改变程序计数器来依次读取指令 从而实现代码的流程控制 如 顺序执行 选择 循环 和异常处理
2.在多线程的情况下 程序计数器用于记录当前线程执行的位置从而当线程被切换回来的时候能够知道线程上次运行到哪里了

如果执行的是native方法 程序计数器记录的是undefined地址 只有执行的是java代码的时候程序计数器记录的才是下一条指令的地址
程序计数器私有的只要目的是为了线程在切换的时候能恢复到正确的执行位置

虚拟机栈 和本地方法栈为什么私有

虚拟机栈：每个java方法在执行之前会创建一个栈帧用于存储局部变量表 操作数栈 常量池引用等信息 从方法调用直至执行完成的过程 就对应一个栈帧在虚拟机中入栈和出栈的过程

本地方法栈： 和虚拟机栈发挥的最有非常相似 区别是 虚拟机栈为虚拟机执行java方法（也就是字节码）服务 而本地方法栈则为虚拟机使用到的native方法服务

在hotspot虚拟机中和Java虚拟机栈合二为一

所以为了线程中的局部变量不被别的线程访问到 虚拟机栈和本地方法栈是线程私有的

一句话了解堆和方法区
堆和方法区是所有线程共享的资源 其中堆是进程中最大的一块内存 主要用于存放新创建的对象 （几乎所有的对象都在这里分配内存），方法区主要用于存放已被加载的类信息
常量 静态变量 即时编译器编译过后的代码等数据


如何创建线程

例如继承thread类 实现runnable接口 使用线程池 使用completableFuture类等

不过这些方法其实并没有真正的创建出线程 准确点来说 都是在java代码中使用多线程的方法

严格来说 只有new thread（）.start（）创建 不管哪种方式都依赖于这个


继承thread类 重写run方法
实现runable接口
实现callable接口
使用ExecutorService线程池
使用completableFuture类
Timer定时器
 但是这些都是创建了一个新的线程 但是用于启动都还是需要 new thread().start()
而所谓的Runnable、Callable……对象，这仅仅只是线程体，也就是提供给线程执行的任务，并不属于真正的Java线程，它们的执行，最终还是需要依赖于new Thread()……


线程的生命周期和状态
NEW: 初始状态，线程被创建出来但没有被调用 start() 。 new runable blocked waiting time waiting terminated
RUNNABLE: 运行状态，线程被调用了 start()等待运行的状态。
BLOCKED：阻塞状态，需要等待锁释放。
WAITING：等待状态，表示该线程需要等待其他线程做出一些特定动作（通知或中断）。
TIME_WAITING：超时等待状态，可以在指定的时间后自行返回而不是像 WAITING 那样一直等待。
TERMINATED：终止状态，表示该线程已经运行完毕。
线程在生命周期中并不是固定处于某一个状态而是随着代码的执行在不同状态之间切换
在操作系统层面，线程有 READY 和 RUNNING 状态；而在 JVM 层面，只能看到 RUNNABLE 状态
（图源：HowToDoInJava：Java Thread Life Cycle and Thread States），所以 Java 系统一般将这两个状态统称为 RUNNABLE（运行中） 状态 。

为什么 JVM 没有区分这两种状态呢？ （摘自：Java 线程运行怎么有第六种状态？ - Dawell 的回答 ）
现在的时分（time-sharing）多任务（multi-task）操作系统架构通常都是用所谓的“时间分片（time quantum or time slice）”方式
进行抢占式（preemptive）轮转调度（round-robin 式）。
这个时间分片通常是很小的，一个线程一次最多只能在 CPU 上运行比如 10-20ms 的时间（此时处于 running 状态），
也即大概只有 0.01 秒这一量级，时间片用后就要被切换下来放入调度队列的末尾等待再次调度。（也即回到 ready 状态）。线程切换的如此之快，区分这两种状态就没什么意义了。

当线程执行 wait()方法之后，线程进入 WAITING（等待） 状态。进入等待状态的线程需要依靠其他线程的通知才能够返回到运行状态。
TIMED_WAITING(超时等待) 状态相当于在等待状态的基础上增加了超时限制，比如通过 sleep（long millis）方法或 wait（long millis）
方法可以将线程置于 TIMED_WAITING 状态。当超时时间结束后，线程将会返回到 RUNNABLE 状态。
当线程进入 synchronized 方法/块或者调用 wait 后（被 notify）重新进入 synchronized 方法/块，但是锁被其它线程占有，这个时候线程就会进入 BLOCKED（阻塞） 状态。
线程在执行完了 run()方法之后将会进入到 TERMINATED（终止） 状态。
