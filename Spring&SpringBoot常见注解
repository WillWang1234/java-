
1.@SpringBootApplication
这个一般不会主动去使用
这个注解是springBoot项目的基石
创建springboot项目之后会默认在主类加上

我们可以把@SpringBootApplication 看作为@configuration @EnableAutoConfiguration @componentScan的集合

这三个注解的作用分别为
@EnableAutoConfiguration 启用SpringBoot的自动配置机制
@ComponentScan 扫描被@component（@repository。@Service @controller）注解的bean 注解默认会扫描该类所在的
包下所有的类 
@configuration 允许在spring上下文中注册额外的bean或导入其他配置类

2.Spring Bean相关
2.1 @AutoWired
自动导入对象到类中
被注入进的类 同样要被Spring容器管理比如 ：Service类注入到Spring类注入到controller类中

2.2 @component @repository @service @controller 
我们一般使用@AutoWired 注解让Spring容器帮我们自动装配bean 要想把类标识为可用于@AutoWired 注解自动装配的bean
的类 可以采取以下注解实现

@Component：通用的注解 可标注任意类为Spring组件 如果一个bean不知道属于哪个层 可以使用@Component注解标注
@Repository：对应持久层即Dao层 主要用于数据库相关操作
@Service对应服务层 主要涉及一些复杂的逻辑 要是由Dao层
@Controller：对应Spring MVC控制层 主要用于接受用户请求并调用Service层返回数据给前端页面

2.3 @RestController
@RestController 注解是@controller和@ResponseBody的合集 表示这是个控制器bean 并且是将函数的返回值直接填入HTTP
响应体中，是Rest风格的控制器

现在都是前后端分离很久没有用过@controller 


单独使用@controller不加@ResponseBody的话一般是用在要返回一个视图的情况 对应于前后端不分离的情况 @controller
+@ResponseBody返回JSON或XML形式数据

@Scope 
生命spring bean的作用域
四种常见的Spring bean的作用域
Singleton 唯一bean实例 Spring中的bean默认都是单例的
prototype 每次请求都会创建一个新的bean实例
request：每次http请求都会产生一个新的bean 该bean仅在当前Http request内有效
session 每个http session会产生一个新的bean 该bean仅在当前http session内有效

2，5@configuration 
一般用于声明配置类 可以使用@component 注解代替 不过使用@configuration 注解声明配置类 更加语义化

3.处理常用的HTTP请求类型
5种常用的请求类型 
GET 请求从服务器获取特定的资源Get/users
POST 在服务器上创建一个新的资源 Post.users
PUT 更新服务器上资源 
DELETE 从服务器删除特定的资源 DELETE/users/23

PATCH 更新服务器上的资源 部分更新

3.1 Get请求

@GetMapping（“users”）等价于@Requestmapping(values="/users",method = RequestMethod.get)
3.2 Post请求

@PostMapping("users") 等价于@RequestMapping(value="/users",method=RequestMethod.POST)
3.3put 请求

@PutMapping("/users/{userId}") 等价于@RequestMapping(value="/users/{userId}",method=RequestMethod.PUT)

3，4DELETE请求
@DeleteMapping("/users/{userId}")等价于@RequestMapping(value="/users/{userId}",method=RequestMethod.DELETE)

3.5. PATCH 请求
一般实际项目中，我们都是 PUT 不够用了之后才用 PATCH 请求去更新数据



4.前后端传值

掌握前后端传值的正确姿势 是你开始crud的前一步 
4.1@PathVariable 和 Requestparam

@PathVariable 用于 获取路径参数 @RequestParam用于获取查询参数

@GetMapping("/klasses/{klassId}/teachers")
public List<Teacher> getKlassRelatedTeachers(
         @PathVariable("klassId") Long klassId,
         @RequestParam(value = "type", required = false) String type ) {
...
}
如果我们请求的url是/klasses/123456/teachers?type = web
那么我们服务获取到的数据就是：klassId=123456,type=web。

4.2@RequestBody
用于读取Request请求 可能是POST PUT DELETE GET请求的body部分并且content-type为Application/json
格式的数据 接收到数据之后会自动将数据绑定到 Java 对象上去。系统会使用HttpMessageConverter
或者自定义的HttpMessageConverter将请求的 body 中的 json 字符串转换为 java 对象。

@PostMapping("/sign-up")
public ResponseEntity signUp(@RequestBody @Valid UserRegisterRequest userRegisterRequest) {
  userService.save(userRegisterRequest);
  return ResponseEntity.ok().build();
}

UserRegisterRequest对象：

@Data
@AllArgsConstructor
@NoArgsConstructor
public class UserRegisterRequest {
    @NotBlank
    private String userName;
    @NotBlank
    private String password;
    @NotBlank
    private String fullName;
}

我们发送 post 请求到这个接口，并且 body 携带 JSON 数据：

{ "userName": "coder", "fullName": "shuangkou", "password": "123456" }
 需要注意的是：一个请求方法只可以有一个@RequestBody，
 但是可以有多个@RequestParam和@PathVariable。 如果你的方法必须要用两个 @RequestBody来接受数据的话，
 大概率是你的数据库设计或者系统设计出问题了！

5.读取配置信息
很多时候 我们需要将一些常用的配置信息 比如阿里云oss 发送短信 微信认证的相关配置信息等等放到配置文件中
下面看下spring为我们提供了哪些方式帮助我们从配置中读取这些配置信息
wuhan2020: 2020年初武汉爆发了新型冠状病毒，疫情严重，但是，我相信一切都会过去！武汉加油！中国加油！

my-profile:
  name: Guide哥
  email: koushuangbwcx@163.com

library:
  location: 湖北武汉加油中国加油
  books:
    - name: 天才基本法
      description: 二十二岁的林朝夕在父亲确诊阿尔茨海默病这天，得知自己暗恋多年的校园男神裴之即将出国深造的消息——对方考取的学校，恰是父亲当年为她放弃的那所。
    - name: 时间的秩序
      description: 为什么我们记得过去，而非未来？时间“流逝”意味着什么？是我们存在于时间之内，还是时间存在于我们之中？卡洛·罗韦利用诗意的文字，邀请我们思考这一亘古难题——时间的本质。
    - name: 了不起的我
      description: 如何养成一个新习惯？如何让心智变得更成熟？如何拥有高质量的关系？ 如何走出人生的艰难时刻？
5.1@Value（常用）
使用@value（“${property}"）读取比较简单的配置信息
@Value("${wuhan2020}")
String wuhan2020;
5.2@configurationProperties（常用）
通过@configurationProperties读取配置信息并与bean绑定
@Component
@ConfigurationProperties(prefix = "library")
class LibraryProperties {
    @NotEmpty
    private String location;
    private List<Book> books;

    @Setter
    @Getter
    @ToString
    static class Book {
        String name;
        String description;
    }
  省略getter/setter
  ......
}
你可以像使用普通的spring bean一样 将其注入到类中使用
5.3@propertySource（不常用）
读取指定的properties文件
@Component
@PropertySource("classpath:website.properties")

class WebSite {
    @Value("${url}")
    private String url;

  省略getter/setter
  ......
}
6.参数校验
数据的校验的重要性就不用说了 即使在前端对数据进行校验的情况下 我们还是要对传入后端的数据再进行一次校验
 避免用户绕过浏览器直接通过一些HTTP工具直接向后端请求一些违法数据
 bean Validation
 是一套定义javabean参数校验标准的规范
 提供了一套注解 可以直接用于javabean属性上从而实现便捷的参数校验 
 jsr303
 jsr349
 jsr380
 校验的时候实际使用的是Hibernate Validator框架 Hibernate validator是hibernate团队最初的数据校验框架 
 spring boot项目的spring boot starterweb依赖中已经有hibernate validator包 不需要引用相关依赖 

 更新版本的springbootstarterweb依赖中不再有hibernate validator包  需要自己引用 spring boot stater validation依赖
 所有的注解，推荐使用 JSR 注解，
 即javax.validation.constraints，而不是org.hibernate.validator.constraints
 javax.validation.constraints
 一些常用的字段验证的注解
 @NotEmpty 被注释的字符串必须不为空 也不为null
 @NotBlank 被注释的字符串必须非null 但是必须包含一个非空字符
 @Null 被注释的元素必须为null
 @NotNull被注释的元素必须不为null
 @AssertTrue 被注释的元素必须为true
 @AssertFalse
 @Pattern（regex=,flag=）被注释的元素必须符合指定的正则表达式
 @Email 被注释的元素必须是email格式 
 @Min(value)被注释的元素必须是一个数字，其值必须大于等于指定的最小值
@Max(value)被注释的元素必须是一个数字，其值必须小于等于指定的最大值
@DecimalMin(value)被注释的元素必须是一个数字，其值必须大于等于指定的最小值
@DecimalMax(value) 被注释的元素必须是一个数字，其值必须小于等于指定的最大值
@Size(max=, min=)被注释的元素的大小必须在指定的范围内
@Digits(integer, fraction)被注释的元素必须是一个数字，其值必须在可接受的范围内
@Past被注释的元素必须是一个过去的日期
@Future 被注释的元素必须是一个将来的日期

6.2验证请求体 
@Data
@AllArgsConstructor
@NoArgsConstructor
public class Person {

    @NotNull(message = "classId 不能为空")
    private String classId;

    @Size(max = 33)
    @NotNull(message = "name 不能为空")
    private String name;

    @Pattern(regexp = "((^Man$|^Woman$|^UGM$))", message = "sex 值不在可选范围")
    @NotNull(message = "sex 不能为空")
    private String sex;

    @Email(message = "email 格式不正确")
    @NotNull(message = "email 不能为空")
    private String email;

}
我们在需要验证的参数上加上了@Valid注解，如果验证失败，它将抛出MethodArgumentNotValidException。

@RestController
@RequestMapping("/api")
public class PersonController {

    @PostMapping("/person")
    public ResponseEntity<Person> getPerson(@RequestBody @Valid Person person) {
        return ResponseEntity.ok().body(person);
    }
}
6.3 验证请求参数（Path Variable 和 Request Parameters）
一定不要忘记在类上加上@validated 注解 这个参数可以告诉spring去校验方法参数

@RestController
@RequestMapping("/api")
@Validated
public class PersonController {

    @GetMapping("/person/{id}")
    public ResponseEntity<Integer> getPersonByID(@Valid @PathVariable("id") @Max(value = 5,message = "超过 id 的范围了") Integer id) {
        return ResponseEntity.ok().body(id);
    }
}

7.全局处理 controller层异常 
@controllerAdvice 注解定义全局异常处理类
@ExcepionHandler 注解声明异常处理方法 
如何使用呢 拿我们在第5节参数校验这块来举例子 如果方法 参数不对的话就会抛出MethodArgumentNotvalidException，
我们来处理这个异常 
@ControllerAdvice
@ResponseBody
public class GlobalExceptionHandler {

    /**
     * 请求参数异常处理
     */
    @ExceptionHandler(MethodArgumentNotValidException.class)
    public ResponseEntity<?> handleMethodArgumentNotValidException(MethodArgumentNotValidException ex, HttpServletRequest request) {
       ......
    }
}
8.JPA相关
8.1创建表 
@Entity声明一个类对应一个数据库实体 
@Table设置表名 

@Entity
@Table(name = "role")
public class Role {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String name;
    private String description;
    省略getter/setter......
}
8.2主键 
@Id：声明一个字段为主键 
使用@Id：声明之后 我们还需要定义主键的生成策略 我们可以使用@GeneratedValue指定主键生成策略
1.通过@generatedValue直接使用JPA内置提供的四种主键 生成策略来指定主键生成策略
@Id
@GeneratedValue(strategy = GenerationType.IDENTITY)
private Long id;
JPA 使用枚举定义了 4 种常见的主键生成策略，如下：

Guide：枚举替代常量的一种用法
public enum GenerationType {

    /**
     * 使用一个特定的数据库表格来保存主键
     * 持久化引擎通过关系数据库的一张特定的表格来生成主键,
     */
    TABLE,

    /**
     *在某些数据库中,不支持主键自增长,比如Oracle、PostgreSQL其提供了一种叫做"序列(sequence)"的机制生成主键
     */
    SEQUENCE,

    /**
     * 主键自增长
     */
    IDENTITY,

    /**
     *把主键生成策略交给持久化引擎(persistence engine),
     *持久化引擎会根据数据库在以上三种主键生成 策略中选择其中一种
     */
    AUTO
}
@GeneratedValue注解默认使用的策略是GenerationType.AUTO

public @interface GeneratedValue {

    GenerationType strategy() default AUTO;
    String generator() default "";
}
一般使用 MySQL 数据库的话，使用GenerationType.IDENTITY策略比较普遍一点
（分布式系统的话需要另外考虑使用分布式 ID）。
2.通过@GenericGenerator声明一个主键策略 然后@GeneratedValue使用这个策略
@Id
@GeneratedValue(generator = "IdentityIdGenerator")
@GenericGenerator(name = "IdentityIdGenerator", strategy = "identity")
private Long id;

等价于：

@Id
@GeneratedValue(strategy = GenerationType.IDENTITY)
private Long id;

jpa 提供的主键生成策略有如下几种：

public class DefaultIdentifierGeneratorFactory
    implements MutableIdentifierGeneratorFactory, Serializable, ServiceRegistryAwareService {

  @SuppressWarnings("deprecation")
  public DefaultIdentifierGeneratorFactory() {
    register( "uuid2", UUIDGenerator.class );
    register( "guid", GUIDGenerator.class );      // can be done with UUIDGenerator + strategy
    register( "uuid", UUIDHexGenerator.class );      // "deprecated" for new use
    register( "uuid.hex", UUIDHexGenerator.class );   // uuid.hex is deprecated
    register( "assigned", Assigned.class );
    register( "identity", IdentityGenerator.class );
    register( "select", SelectGenerator.class );
    register( "sequence", SequenceStyleGenerator.class );
    register( "seqhilo", SequenceHiLoGenerator.class );
    register( "increment", IncrementGenerator.class );
    register( "foreign", ForeignGenerator.class );
    register( "sequence-identity", SequenceIdentityGenerator.class );
    register( "enhanced-sequence", SequenceStyleGenerator.class );
    register( "enhanced-table", TableGenerator.class );
  }

  public void register(String strategy, Class generatorClass) {
    LOG.debugf( "Registering IdentifierGenerator strategy [%s] -> [%s]", strategy, generatorClass.getName() );
    final Class previous = generatorStrategyToClassNameMap.put( strategy, generatorClass );
    if ( previous != null ) {
      LOG.debugf( "    - overriding [%s]", previous.getName() );
    }
  }

}
8.3设置字段类型 
@Column声明字段 
示例 
设置属性userName对应的数据库字段名为user_name 长度为32 非空 
@Column(name = "user_name", nullable = false, length=32)
private String userName;
设置字段类型并加默认值
@Column(columnDefinition = "tinyint(1) default 1")
private Boolean enabled;
8.4 指定不持久化特定字段

@Transient：声明不需要与数据库映射的字段，在保存的时候不需要保存进数据库 。

如果我们想让secrect 这个字段不被持久化，可以使用 @Transient关键字声明。
@Entity(name="USER")
public class User {

    ......
    @Transient
    private String secrect; // not persistent because of @Transient

}

除了 @Transient关键字声明， 还可以采用下面几种方法：

static String secrect; // not persistent because of static
final String secrect = "Satish"; // not persistent because of final
transient String secrect; // not persistent because of transient
一般使用注解的方式比较多。
8.5声明大字段
@Lob:声明某个字段为大字段。

@Lob
private String content;
更详细的声明：

@Lob
//指定 Lob 类型数据的获取策略， FetchType.EAGER 表示非延迟加载，而 FetchType.LAZY 表示延迟加载 ；
@Basic(fetch = FetchType.EAGER)
//columnDefinition 属性指定数据表对应的 Lob 字段类型
@Column(name = "content", columnDefinition = "LONGTEXT NOT NULL")
private String content;

8.6创建枚举类型的字段 
可以使用枚举类型的字段，不过枚举字段要用@Enumerated注解修饰。
public enum Gender {
    MALE("男性"),
    FEMALE("女性");

    private String value;
    Gender(String str){
        value=str;
    }
}


@Entity
@Table(name = "role")
public class Role {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String name;
    private String description;
    @Enumerated(EnumType.STRING)
    private Gender gender;
    省略getter/setter......
}
数据库里面对应存储的是 MALE/FEMALE。

8.7增加审计功能
只要继承了 AbstractAuditBase的类都会默认加上下面四个字段。
@Data
@AllArgsConstructor
@NoArgsConstructor
@MappedSuperclass
@EntityListeners(value = AuditingEntityListener.class)
public abstract class AbstractAuditBase {

    @CreatedDate
    @Column(updatable = false)
    @JsonIgnore
    private Instant createdAt;

    @LastModifiedDate
    @JsonIgnore
    private Instant updatedAt;

    @CreatedBy
    @Column(updatable = false)
    @JsonIgnore
    private String createdBy;

    @LastModifiedBy
    @JsonIgnore
    private String updatedBy;
}

我们对应的审计功能对应地配置类可能是下面这样的（Spring Security 项目）:

@Configuration
@EnableJpaAuditing
public class AuditSecurityConfiguration {
    @Bean
    AuditorAware<String> auditorAware() {
        return () -> Optional.ofNullable(SecurityContextHolder.getContext())
                .map(SecurityContext::getAuthentication)
                .filter(Authentication::isAuthenticated)
                .map(Authentication::getName);
    }
}

简单介绍一下上面涉及到的一些注解：

@CreatedDate: 表示该字段为创建时间字段，在这个实体被 insert 的时候，会设置值

@CreatedBy :表示该字段为创建人，在这个实体被 insert 的时候，会设置值

@LastModifiedDate、@LastModifiedBy同理。

@EnableJpaAuditing：开启 JPA 审计功能。

8.8 删除 /修改数据
@Modifying 注解提示 JPA 该操作是修改操作,注意还要配合@Transactional注解使用。

@Repository
public interface UserRepository extends JpaRepository<User, Integer> {

    @Modifying
    @Transactional(rollbackFor = Exception.class)
    void deleteByUserName(String userName);
}

8.9. 关联关系
@OneToOne 声明一对一关系
@OneToMany 声明一对多关系
@ManyToOne 声明多对一关系
@ManyToMany 声明多对多关系

9. 事务 @Transactional
在要开启事务的方法上使用@Transactional注解即可!

@Transactional(rollbackFor = Exception.class)
public void save() {
  ......
}

我们知道 Exception 分为运行时异常 RuntimeException 和非运行时异常。
在@Transactional注解中如果不配置rollbackFor属性,那么事务只会在遇到RuntimeException的时候才会回滚,
加上rollbackFor=Exception.class,可以让事务在遇到非运行时异常时也回滚。

@Transactional 注解一般可以作用在类或者方法上。

作用于类：当把@Transactional 注解放在类上时，表示所有该类的 public 方法都配置相同的事务属性信息。
作用于方法：当类配置了@Transactional，方法也配置了@Transactional，方法的事务会覆盖类的事务配置信息。
更多关于 Spring 事务的内容请查看我的这篇文章：可能是最漂亮的 Spring 事务管理详解 。


json数据处理

10.1过滤json数据
@JsonIgnoreProperties 作用在类上用于过滤掉特定字段不返回或者不解析。

//生成json时将userRoles属性过滤
@JsonIgnoreProperties({"userRoles"})
public class User {

    private String userName;
    private String fullName;
    private String password;
    private List<UserRole> userRoles = new ArrayList<>();
}

@JsonIgnore一般用于类的属性上，作用和上面的@JsonIgnoreProperties 一样。

public class User {

    private String userName;
    private String fullName;
    private String password;
   //生成json时将userRoles属性过滤
    @JsonIgnore
    private List<UserRole> userRoles = new ArrayList<>();
}

10.2格式化json数据

@JsonFormat一般用来格式化 json 数据。

比如：

@JsonFormat(shape=JsonFormat.Shape.STRING, pattern="yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", timezone="GMT")
private Date date;

10.3扁平化对象

@Getter
@Setter
@ToString
public class Account {
    private Location location;
    private PersonInfo personInfo;

  @Getter
  @Setter
  @ToString
  public static class Location {
     private String provinceName;
     private String countyName;
  }
  @Getter
  @Setter
  @ToString
  public static class PersonInfo {
    private String userName;
    private String fullName;
  }
}

扁平化之前：

{
  "location": {
    "provinceName": "湖北",
    "countyName": "武汉"
  },
  "personInfo": {
    "userName": "coder1234",
    "fullName": "shaungkou"
  }
}
使用@JsonUnwrapped 扁平对象之后：

@Getter
@Setter
@ToString
public class Account {
    @JsonUnwrapped
    private Location location;
    @JsonUnwrapped
    private PersonInfo personInfo;
    ......
}

{
  "provinceName": "湖北",
  "countyName": "武汉",
  "userName": "coder1234",
  "fullName": "shaungkou"
}

测试相关：
@ActiveProfiles一般作用于测试类上， 用于声明生效的 Spring 配置文件。

@SpringBootTest(webEnvironment = RANDOM_PORT)
@ActiveProfiles("test")
@Slf4j
public abstract class TestBase {
  ......
}
@Test声明一个方法为测试方法

@Transactional被声明的测试方法的数据会回滚，避免污染测试数据。

@WithMockUser Spring Security 提供的，用来模拟一个真实用户，并且可以赋予权限。

    @Test
    @Transactional
    @WithMockUser(username = "user-id-18163138155", authorities = "ROLE_TEACHER")
    void should_import_student_success() throws Exception {
        ......
    }
