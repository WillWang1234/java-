事务隔离级别总结：

SQL标准定义了四个隔离级别 
Read-uncommitted(读取未提交）最低的隔离级别 允许读取尚未提交的数据变更 可能会导致幻读 脏读 和不可重复读
read-committed(读取已提交)允许读取并发事务已经提交的数据 可以阻止脏读 但是幻读或不可重复读仍有可能发生
repeatable-read（可重复读）对一个字段多次读取结果都是一致的 除非数据是被本身事务自己所修改 可以阻止脏读和不可重复读 但幻读仍有可能发生
serializable（可串行化）最高的隔离级别 完全服从ACID的隔离级别 所有的事务依次逐个执行 这样事物之间完全不会受到干扰 也就是说 该级别可以防止脏读 不可重复读 和幻读 

MySQL InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读）。我们可以通过SELECT @@tx_isolation;命令来查看，MySQL 8.0 该命令改为SELECT @@transaction_isolation;MySQL> SELECT @@tx_isolation;
+-----------------+
| @@tx_isolation  |
+-----------------+
| REPEATABLE-READ |
+-----------------+从上面对 SQL 标准定义了四个隔离级别的介绍可以看出，标准的 SQL 隔离级别定义里，REPEATABLE-READ(可重复读)
是不可以防止幻读的。
------

但是innodb实现的repeatable-read隔离级别是可以解决幻读问题发生的 主要有两种情况 
快照读 由mvcc机制来保证不出现幻读
当前读 由next-key lock进行加锁来保证不出现幻读 next-key lock是行锁（record-lock）和间隙锁（gap-lock）的结合 
行锁只能锁住已经存在的行 为了避免插入新行 需要依赖间隙锁 

因为隔离级别越低，事务请求的锁越少，所以大部分数据库系统的隔离级别都是 READ-COMMITTED ，
但是你要知道的是 InnoDB 存储引擎默认使用 REPEATABLE-READ 并不会有任何性能损失。

InnoDB 存储引擎在分布式事务的情况下一般会用到 SERIALIZABLE 隔离级别。

InnoDB 存储引擎提供了对 XA 事务的支持，并通过 XA 事务来支持分布式事务的实现。
分布式事务指的是允许多个独立的事务资源（transactional resources）参与到一个全局的事务中。
事务资源通常是关系型数据库系统，但也可以是其他类型的资源。全局事务要求在其中的所有参与的事务要么都提交，
要么都回滚，这对于事务原有的 ACID 要求又有了提高。另外，在使用分布式事务时，
InnoDB 存储引擎的事务隔离级别必须设置为 SERIALIZABLE
------

解决幻读的方法解决幻读的方式有很多，但是它们的核心思想就是一个事务在操作某张表数据的时候，
另外一个事务不允许新增或者删除这张表中的数据了。
解决幻读的方式主要有以下几种：
将事务隔离级别调整为 SERIALIZABLE 。
在可重复读的事务级别下，给事务操作的这张表添加表锁。
在可重复读的事务级别下，给事务操作的这张表添加 Next-key Lock（Record Lock+Gap Lock）。
------
