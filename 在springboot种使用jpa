JPA基础 ：常见操作

1.相关依赖 

我们需要下面这些依赖支持我们完成这部分内容的学习：
<dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    2.配置数据库连接信息 和JPA配置 
    下面的配置中需要单独说一下 spring.jpa.hibernate.ddl-auto=create这个配置选项。
    常用的选项有四个
    1.Create：每次重新启动项目都会重新创建表结构
    2.create_drop：每次启动项目创建表结构 关闭项目删除表结构
    3.update：每次启动项目 会更新表结构 
    4.Validate：验证表结构 不抵数据库进行任何更改
    但是 一定不要再生产环境中使用ddl自动生成表结构 一般推荐手写SQL语句配合FlyWay来做这些事情

spring.datasource.url=jdbc:mysql://localhost:3306/springboot_jpa?useSSL=false&serverTimezone=CTT
spring.datasource.username=root
spring.datasource.password=123456
# 打印出 sql 语句
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=create
spring.jpa.open-in-view=false
# 创建的表的 ENGINE 为 InnoDB
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL55Dialect    

3.实体类

我们为这个类添加了@Entity注解代表它是数据库持久化类 还配置了主键id
import lombok.Data;
import lombok.NoArgsConstructor;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

@Entity
@Data
@NoArgsConstructor
publicclass Person {
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    @Column(unique = true)
    private String name;
    private Integer age;

    public Person(String name, Integer age) {
        this.name = name;
        this.age = age;
    }

}

如何检验你是否正确完成了上面 3 步?很简单，运行项目，查看数据如果发现控制台打印出创建表的 sql 语句，
并且数据库中表真的被创建出来的话，说明你成功完成前面 3 步。
控制台打印出来的 sql 语句类似下面这样：
droptableifexists person
CREATETABLE`person` (
  `id`bigint(20) NOTNULL AUTO_INCREMENT,
  `age`int(11) DEFAULTNULL,
  `name`varchar(255) DEFAULTNULL，
   PRIMARY KEY (`id`)
) ENGINE=InnoDBDEFAULTCHARSET=utf8;
altertable person addconstraint UK_p0wr4vfyr2lyifm8avi67mqw5 unique (name)

4.创建操作数据库的Repository接口 
@Repository
publicinterface PersonRepository extends JpaRepository<Person, Long> {
}

首先这个接口加了 @Repository 注解，代表它和数据库操作有关。
另外，它继承了 JpaRepository<Person, Long>接口，而JpaRepository<Person, Long>长这样：
@NoRepositoryBean
publicinterface JpaRepository<T, ID> extends PagingAndSortingRepository<T, ID>, QueryByExampleExecutor<T> {
    List<T> findAll();

    List<T> findAll(Sort var1);

    List<T> findAllById(Iterable<ID> var1);

    <S extends T> List<S> saveAll(Iterable<S> var1);

    void flush();

    <S extends T> S saveAndFlush(S var1);

    void deleteInBatch(Iterable<T> var1);

    void deleteAllInBatch();

    T getOne(ID var1);

    <S extends T> List<S> findAll(Example<S> var1);

    <S extends T> List<S> findAll(Example<S> var1, Sort var2);
}

这表明我们只要继承了JpaRepository<T, ID> 就具有了 JPA 为我们提供好的增删改查、
分页查询以及根据条件查询等方法

4.1 Jpa自带方法实战

增删查改
1.保存用户到数据库 
   Person person = new Person("SnailClimb", 23);
    personRepository.save(person);
    save()方法对应 sql 语句就是:insert into person (age, name) values (23,"snailclimb")
2.根据id查找用户

 Optional<Person> personOptional = personRepository.findById(id);
 findById()方法对应 sql 语句就是：select * from person p where p.id = id

 3.根据id删除用户
   personRepository.deleteById(id);
   deleteById()方法对应 sql 语句就是：delete from person where id=id

4.跟新用户

更新操作也要通过 save()方法来实现，比如：

    Person person = new Person("SnailClimb", 23);
    Person savedPerson = personRepository.save(person);
    // 更新 person 对象的姓名
    savedPerson.setName("UpdatedName");
    personRepository.save(savedPerson);
在这里 save()方法相当于 sql 语句：update person set name="UpdatedName" where id=id

2) 带条件的查询
下面这些方法是我们根据 JPA 提供的语法自定义的，你需要将下面这些方法写到 PersonRepository 中。

假如我们想要根据 Name 来查找 Person ，你可以这样：

Optional<Person> findByName(String name);
如果你想要找到年龄大于某个值的人，你可以这样：

List<Person> findByAgeGreaterThan(int age);

4.2 自定义 SQL 语句实战
很多时候我们自定义 sql 语句会非常有用。

根据 name 来查找 Person：

@Query("select p from Person p where p.name = :name")
    Optional<Person> findByNameCustomeQuery(@Param("name") String name);
Person 部分属性查询，避免 select *操作：

@Query("select p.name from Person p where p.id = :id")
    String findPersonNameById(@Param("id") Long id);
根据 id 更新Person name：


    @Modifying
    @Transactional
    @Query("update Person p set p.name = ?1 where p.id = ?2")
    void updatePersonNameById(String name, Long id);

4.3创建异步方法
如果我们需要创建异步方法的话，也比较方便。

异步方法在调用时立即返回，然后会被提交给TaskExecutor执行。
当然你也可以选择得出结果后才返回给客户端。如果对 Spring Boot 异步编程感兴趣的话可以看这篇文章：
《新手也能看懂的 SpringBoot 异步编程指南》 。

@Async
Future<User> findByName(String name);

@Async
CompletableFuture<User> findByName(String name);

5.测试类和源代码地址
测试类：
@SpringBootTest
@RunWith(SpringRunner.class)
publicclass PersonRepositoryTest {
    @Autowired
    private PersonRepository personRepository;
    private Long id;

    /**
     * 保存person到数据库
     */
    @Before
    public void setUp() {
        assertNotNull(personRepository);
        Person person = new Person("SnailClimb", 23);
        Person savedPerson = personRepository.saveAndFlush(person);// 更新 person 对象的姓名
        savedPerson.setName("UpdatedName");
        personRepository.save(savedPerson);

        id = savedPerson.getId();
    }

    /**
     * 使用 JPA 自带的方法查找 person
     */
    @Test
    public void should_get_person() {
        Optional<Person> personOptional = personRepository.findById(id);
        assertTrue(personOptional.isPresent());
        assertEquals("SnailClimb", personOptional.get().getName());
        assertEquals(Integer.valueOf(23), personOptional.get().getAge());

        List<Person> personList = personRepository.findByAgeGreaterThan(18);
        assertEquals(1, personList.size());
        // 清空数据库
        personRepository.deleteAll();
    }

    /**
     * 自定义 query sql 查询语句查找 person
     */

    @Test
    public void should_get_person_use_custom_query() {
        // 查找所有字段
        Optional<Person> personOptional = personRepository.findByNameCustomeQuery("SnailClimb");
        assertTrue(personOptional.isPresent());
        assertEquals(Integer.valueOf(23), personOptional.get().getAge());
        // 查找部分字段
        String personName = personRepository.findPersonNameById(id);
        assertEquals("SnailClimb", personName);
        System.out.println(id);
        // 更新
        personRepository.updatePersonNameById("UpdatedName", id);
        Optional<Person> updatedName = personRepository.findByNameCustomeQuery("UpdatedName");
        assertTrue(updatedName.isPresent());
        // 清空数据库
        personRepository.deleteAll();
    }

}

二 JPA连表查询和分页
对于连表查询，在 JPA 中还是非常常见的，由于  JPA 可以在 respository 层自定义 SQL 语句，
所以通过自定义 SQL 语句的方式实现连表还是挺简单。这篇文章是在上一篇入门 JPA的文章的基础上写的，
不了解 JPA 的可以先看上一篇文章。

在上一节的基础上我们新建了两个实体类，如下
1.相关实体类创建
Company.java

@Entity
@Data
@NoArgsConstructor
publicclass Company {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    @Column(unique = true)
    private String companyName;
    private String description;

    public Company(String name, String description) {
        this.companyName = name;
        this.description = description;
    }
}

School.java
@Entity
@Data
@NoArgsConstructor @NoArgsConstructor：也是 Lombok 提供的注解，用于生成一个无参构造函数。JPA 要求实体类必须有一个无参构造函数，以便在数据库查询时可以通过反射创建对象。
@AllArgsConstructor  Lombok 提供的一个注解，用于自动生成一个包含所有字段的构造函数。
也就是说，它会根据类中定义的所有字段，生成一个有参数的构造函数，并且构造函数的参数顺序与字段的顺序一致。
public class School {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    @Column(unique = true)
    private String name;
    private String description;
}

2.自定义SQL语句实现连表查询 
假如我们当前要通过 person 表的 id 来查询 Person 的话，
我们知道 Person 的信息一共分布在Company、School、Person这三张表中，
所以，我们如果要把 Person 的信息都查询出来的话是需要进行连表查询的。

首先我们需要创建一个包含我们需要的 Person 信息的 DTO 对象,
我们简单第将其命名为 UserDTO，用于保存和传输我们想要的信息。

@Data
@NoArgsConstructor
@Builder(toBuilder = true)
toBuilder = true 表示会自动为生成的 builder 类添加一个 toBuilder() 方法，
这样可以通过现有对象的值创建一个新的 UserDTO 对象，
并对部分字段进行修改。这非常有用，尤其在更新对象时。比如：
@AllArgsConstructor
publicclass UserDTO {
    private String name;
    privateint age;
    private String companyName;
    private String schoolName;
}

为什么同时使用 @NoArgsConstructor 和 @AllArgsConstructor？
这两个注解是用于生成不同类型的构造函数：

无参构造函数 (@NoArgsConstructor)：通常是为了满足 JPA 或其他框架的要求，确保能够通过反射创建类的实例。
全参构造函数 (@AllArgsConstructor)：方便在创建对象时一次性为所有字段赋值，适用于需要手动创建对象的场景。
这两个构造函数可以同时存在，互不冲突。这样做可以让 UserDTO 类既具备无参构造函数以满足框架要求，
又具备全参构造函数以便开发者快速创建对象。

下面我们就来写一个方法查询出 Person 的基本信息。

/**
     * 连表查询
     */
    @Query(value = "select new github.snailclimb.jpademo.model.dto.UserDTO(p.name,p.age,c.companyName,s.name) " +
            "from Person p left join Company c on  p.companyId=c.id " +
            "left join School s on p.schoolId=s.id " +
            "where p.id=:personId")
    Optional<UserDTO> getUserInformation(@Param("personId") Long personId);
可以看出上面的 sql 语句和我们平时写的没啥区别，差别比较大的就是里面有一个 new 对象的操作。

3.自定义 SQL 语句连表查询并实现分页操作
假如我们要查询当前所有的人员信息并实现分页的话，你可以按照下面这种方式来做。可以看到，为了实现分页，
我们在@Query注解中还添加了 countQuery 属性

@Query(value = "select new github.snailclimb.jpademo.model.dto.UserDTO(p.name,p.age,c.companyName,s.name) " +
        "from Person p left join Company c on  p.companyId=c.id " +
        "left join School s on p.schoolId=s.id ",
        countQuery = "select count(p.id) " +
                "from Person p left join Company c on  p.companyId=c.id " +
                "left join School s on p.schoolId=s.id ")
Page<UserDTO> getUserInformationList(Pageable pageable);

实际使用
//分页选项
PageRequest pageRequest = PageRequest.of(0, 3, Sort.Direction.DESC, "age");
Page<UserDTO> userInformationList = personRepository.getUserInformationList(pageRequest);
//查询结果总数
System.out.println(userInformationList.getTotalElements());// 6
//按照当前分页大小，总页数
System.out.println(userInformationList.getTotalPages());// 2
System.out.println(userInformationList.getContent());

4.加餐 ：自定义 SQL语句的其他用法
两种比较常用的
1.IN查询
2.Between查询

4，1 IN查询
在 sql 语句中加入我们需要筛选出符合几个条件中的一个的情况下，可以使用 IN 查询，对应到 JPA 中也非常简单。比如下面的方法就实现了，根据名字过滤需要的人员信息。

@Query(value = "select new github.snailclimb.jpademo.model.dto.UserDTO(p.name,p.age,c.companyName,s.name) " +
        "from Person p left join Company c on  p.companyId=c.id " +
        "left join School s on p.schoolId=s.id " +
        "where p.name IN :peopleList")
List<UserDTO> filterUserInfo(List peopleList);
@Query（value = "select new github.snailclimb.jpademo.model.dto.UserDTO(p.name,p.page,c.companyName,s.name)"）+
        "from Person p left join Company c on p.companyId = c.id" +
        "left join School s on p.schoolId = s.id" +
        "Where p.name IN :peopleList"）

List<UserDTO> filterUserInfo(List peopleList);
实际使用
List<String> personList=new ArrayList<>(Arrays.asList("person1","person2"));
List<UserDTO> userDTOS = personRepository.filterUserInfo(personList);

IN 查询是 SQL 中的一种条件判断，它允许你在查询中指定多个值作为筛选条件，来判断某个字段是否匹配这些值中的任意一个。这是一种非常常用的方式，特别是在需要根据多个可能值来筛选数据时。

举个例子：

sql
复制
编辑
SELECT * FROM employees
WHERE name IN ('Alice', 'Bob', 'Charlie');

4.2 Between查询
查询满足某个范围的值。比如下面的方法就实现查询满足某个年龄范围的人员的信息。

@Query(value = "select new github.snailclimb.jpademo.model.dto.UserDTO(p.name,p.age,c.companyName,s.name) " +
            "from Person p left join Company c on  p.companyId=c.id " +
            "left join School s on p.schoolId=s.id " +
            "where p.age between :small and :big")
    List<UserDTO> filterUserInfoByAge(int small,int big);
实际使用：

List<UserDTO> userDTOS = personRepository.filterUserInfoByAge(19,20);

5.测试类和源代码地址
@SpringBootTest
@RunWith(SpringRunner.class)
publicclass PersonRepositoryTest2 {
    @Autowired
    private PersonRepository personRepository;

    @Sql(scripts = {"classpath:/init.sql"})
    @Test
    public void find_person_age_older_than_18() {
        List<Person> personList = personRepository.findByAgeGreaterThan(18);
        assertEquals(1, personList.size());
    }

    @Sql(scripts = {"classpath:/init.sql"})
    @Test
    public void should_get_user_info() {
        Optional<UserDTO> userInformation = personRepository.getUserInformation(1L);
        System.out.println(userInformation.get().toString());
    }

    @Sql(scripts = {"classpath:/init.sql"})
    @Test
    public void should_get_user_info_list() {
        PageRequest pageRequest = PageRequest.of(0, 3, Sort.Direction.DESC, "age");
        Page<UserDTO> userInformationList = personRepository.getUserInformationList(pageRequest);
        //查询结果总数
        System.out.println(userInformationList.getTotalElements());// 6
        //按照当前分页大小，总页数
        System.out.println(userInformationList.getTotalPages());// 2
        System.out.println(userInformationList.getContent());
    }

    @Sql(scripts = {"classpath:/init.sql"})
    @Test
    public void should_filter_user_info() {
        List<String> personList=new ArrayList<>(Arrays.asList("person1","person2"));
        List<UserDTO> userDTOS = personRepository.filterUserInfo(personList);
        System.out.println(userDTOS);
    }

    @Sql(scripts = {"classpath:/init.sql"})
    @Test
    public void should_filter_user_info_by_age() {
        List<UserDTO> userDTOS = personRepository.filterUserInfoByAge(19,20);
        System.out.println(userDTOS);
    }
}

这段代码是一个 **Spring Boot 测试类**，用来测试 `PersonRepository` 中的各个方法是否能够正确执行。测试类使用了 `JUnit` 和 `Spring` 的集成测试功能，注解和配置都遵循了 `Spring Boot` 的测试规范。

### 代码讲解：

#### 1. **类注解**

```java
@SpringBootTest
@RunWith(SpringRunner.class)
public class PersonRepositoryTest2 {
```

- `@SpringBootTest`：这是一个 Spring Boot 测试注解，表示启动整个 Spring 应用程序上下文，并使测试类可以访问 Spring 上下文中所有的 Bean。这是集成测试的常见注解。
- `@RunWith(SpringRunner.class)`：这是告诉 JUnit 使用 Spring 的测试运行器来执行测试。`SpringRunner` 是 Spring 提供的 JUnit 运行器，能让测试类与 Spring 容器进行集成。

#### 2. **依赖注入**

```java
@Autowired
private PersonRepository personRepository;
```

- `@Autowired`：Spring 会自动注入 `PersonRepository` 到测试类中。这样我们可以在测试方法中直接使用 `personRepository` 来操作数据库。

#### 3. **`@Sql` 注解**

```java
@Sql(scripts = {"classpath:/init.sql"})
```

- `@Sql` 注解用于在测试方法执行前或执行后执行 SQL 脚本。这里的 `init.sql` 文件会在每个测试方法执行之前执行，用于初始化数据库。这对于数据库状态的设置非常有用，避免每个测试方法手动清理和初始化数据库。

#### 4. **测试方法**

每个方法上都有 `@Test` 注解，表示这些方法是测试方法。

##### 方法 1: **`find_person_age_older_than_18`**

```java
@Test
public void find_person_age_older_than_18() {
    List<Person> personList = personRepository.findByAgeGreaterThan(18);
    assertEquals(1, personList.size());
}
```

- **功能**：查询 `age > 18` 的人员。
- **实现**：调用 `personRepository.findByAgeGreaterThan(18)` 方法查询所有年龄大于 18 的人员，并通过 `assertEquals(1, personList.size())` 断言结果数量是否为 1。

##### 方法 2: **`should_get_user_info`**

```java
@Test
public void should_get_user_info() {
    Optional<UserDTO> userInformation = personRepository.getUserInformation(1L);
    System.out.println(userInformation.get().toString());
}
```

- **功能**：获取 `id = 1` 的用户信息。
- **实现**：调用 `personRepository.getUserInformation(1L)` 查询用户信息，返回一个 `Optional<UserDTO>`，并打印出用户信息。

##### 方法 3: **`should_get_user_info_list`**

```java
@Test
public void should_get_user_info_list() {
    PageRequest pageRequest = PageRequest.of(0, 3, Sort.Direction.DESC, "age");
    Page<UserDTO> userInformationList = personRepository.getUserInformationList(pageRequest);
    System.out.println(userInformationList.getTotalElements());
    System.out.println(userInformationList.getTotalPages());
    System.out.println(userInformationList.getContent());
}
```

- **功能**：分页查询用户信息，按年龄降序排序。
- **实现**：创建一个 `PageRequest` 来指定分页信息（页码、页大小、排序字段）。然后调用 `personRepository.getUserInformationList(pageRequest)` 方法获取分页结果。
  - `userInformationList.getTotalElements()` 返回查询到的记录总数。
  - `userInformationList.getTotalPages()` 返回总页数。
  - `userInformationList.getContent()` 返回当前页的内容（即用户信息列表）。

##### 方法 4: **`should_filter_user_info`**

```java
@Test
public void should_filter_user_info() {
    List<String> personList = new ArrayList<>(Arrays.asList("person1", "person2"));
    List<UserDTO> userDTOS = personRepository.filterUserInfo(personList);
    System.out.println(userDTOS);
}
```

- **功能**：通过名字筛选用户信息。
- **实现**：传递一个名字列表 `personList`，调用 `personRepository.filterUserInfo(personList)` 方法查询这些名字对应的用户信息，并打印结果。

##### 方法 5: **`should_filter_user_info_by_age`**

```java
@Test
public void should_filter_user_info_by_age() {
    List<UserDTO> userDTOS = personRepository.filterUserInfoByAge(19, 20);
    System.out.println(userDTOS);
}
```

- **功能**：通过年龄区间筛选用户信息。
- **实现**：传递年龄区间（19 到 20 岁），调用 `personRepository.filterUserInfoByAge(19, 20)` 查询在这个年龄范围内的用户信息，并打印结果。

### 总结：
1. **`@SpringBootTest`**：启动 Spring Boot 上下文，用于集成测试。
2. **`@Autowired`**：自动注入 `PersonRepository`，通过它访问数据库。
3. **`@Sql`**：在每个测试方法执行前执行 SQL 脚本，用于初始化数据库状态。
4. 每个测试方法通过调用对应的 `PersonRepository` 方法并使用断言或输出，检查查询是否正确执行。

这样，测试类不仅验证了 `PersonRepository` 的功能是否符合预期，还确保了在不同的条件下数据查询的准确性和完整性。
